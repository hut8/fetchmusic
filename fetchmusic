#!/usr/bin/env python3
from __future__ import print_function
from __future__ import unicode_literals
from bs4 import BeautifulSoup
import os
import re
import readline
import requests
import sys
from urllib.parse import quote_plus

# deal with the Windows Console's inability to handle Unicode
if sys.platform == 'win32' and sys.stdout.isatty():
    try:
        import win_unicode_console
        win_unicode_console.enable()
    except ImportError:
        print("win_unicode_console module not found. Expect Unicode weirdness")
        print("To resolve, run:\n\tpip install win_unicode_console")

def extract_videos(html):
    """
    Parses given html and returns a list of (Title, Link) for
    every movie found.
    """
    soup = BeautifulSoup(html, 'html.parser')
    pattern = re.compile(r'/watch\?v=')
    found = soup.find_all('a', 'yt-uix-tile-link', href=pattern)
    return [(x.text, x.get('href')) for x in found]

def list_movies(movies):
    for idx, (title, _) in enumerate(movies):
        yield '[{}] {}'.format(idx, title)

def search_videos(query):
    """
    Searches for videos given a query
    """
    response = requests.get('https://www.youtube.com/results?search_query=' + query)
    return extract_videos(response.text)

class YoutubeSearcher(object):
    def __init__(self):
        self.soup = BeautifulSoup(html, 'html.parser')
        self.pattern = re.compile(r'/watch\?v=')

    def extract_videos(self, html):
        """
        Parses given html and returns a list of (Title, Link) for
        every movie found.
        """
        found = self.soup.find_all('a', 'yt-uix-tile-link',
                                   href=self.pattern)
        return [(x.text, x.get('href')) for x in found]

    def list_movies(self, movies):
        for idx, (title, _) in enumerate(movies):
            yield '[{}] {}'.format(idx, title)

    def search_videos(self, query):
        """
        Searches for videos given a query
        """
        response = requests.get('https://www.youtube.com/results?search_query=' + query)
        return self.extract_videos(response.text)


class Downloader(object):
    def __init__(self):
        self.dest_directory = os.path.expanduser('~/Music')

def query_and_download(search):
    """
    Queries the internet for given lyrics and downloads them into the current working directory.
    If has_prompts is False, will download first available song.
    If is_quiet is True, will run beautiful-soup in quiet mode. Prompts will also automatically be turned
                         off in quiet mode. This is mainly so that instantmusic can be run as a background process.
    Returns the title of the video downloaded from.
    """

    available = search_videos(search)

    if not available:
        print('No results found matching your query.')
        sys.exit(2) # Indicate failure using the exit code

    print('Found:')
    for title in list_movies(available):
        print(title)

    choice = ''
    while choice.strip() == '':
        choice = input('Pick one: ')
    title, video_link = available[int(choice)]

    dest_directory = os.path.expanduser('~/Music')
    dest_path = os.path.join(dest_directory, '%(title)s.%(ext)s')

    command_tokens = [
        'youtube-dl',
        '--extract-audio',
        '--audio-format mp3',
        '--audio-quality 0',
        '--output "{}"'.format(dest_path),
        'https://www.youtube.com' + video_link]

    if is_quiet:
        command_tokens.insert(1, '-q')

    command = ' '.join(command_tokens)

    # Youtube-dl is a proof that god exists.
    if not is_quiet: print('Downloading')
    os.system(command)


def search_uses_flags(argstring, *flags):
    """
    Check if the given flags are being used in the command line argument string
    """
    for flag in flags:
        if (argstring.find(flag) != 0):
            return True
    return False

def main():
    """
    Run the program session
    """
    argument_string = ' '.join(sys.argv[1:])
    search = ''

    # No command-line arguments
    if not sys.argv[1:]:
        # We do not want to accept empty inputs :)
        while search == '':
            search = input('Enter songname / lyrics / artist.. or whatever\n> ')
        search = quote_plus(search)
        downloaded = query_and_download(search)

    # Command-line arguments detected!
    else:
        # No flags at all are specified
        if not search_uses_flags(argument_string, '-s', '-i', '-f', '-p', '-q'):
            search = quote_plus(' '.join(sys.argv[1:]))
            downloaded = query_and_download(search)

        # No input flags are specified
        elif not search_uses_flags(argument_string, '-s', '-i', '-f'):
            # Default to -s
            lyrics = argument_string.replace('-p', '').replace('-q', '')
            search = quote_plus(lyrics)
            downloaded = query_and_download(search, not search_uses_flags('-p'), search_uses_flags('-q'))

        # Some input flags are specified
        else:
            # Lots of parser-building fun!
            import argparse
            parser = argparse.ArgumentParser(description='Instantly download any song!')
            parser.add_argument('-p', action='store_false', dest='has_prompt', help="Turn off download prompts")
            parser.add_argument('-q', action='store_true', dest='is_quiet', help="Run in quiet mode. Automatically turns off prompts.")
            parser.add_argument('-s', action='store', dest='song', nargs='+', help='Download a single song.')
            parser.add_argument('-l', action='store', dest='songlist', nargs='+', help='Download a list of songs, with lyrics separated by a comma (e.g. "i tried so hard and got so far, blackbird singing in the dead of night, hey shawty it\'s your birthday).')
            parser.add_argument('-f', action='store', dest='file', nargs='+', help='Download a list of songs from a file input. Each line in the file is considered one song.')

            # Parse and check arguments
            results = parser.parse_args()

            song_list = []
            if results.song:
                song_list.append(quote_plus(' '.join(results.song)))

            if results.songlist:
                songs = ' '.join(results.songlist)
                song_list.extend([quote_plus(song)
                                  for song in songs.split(',')])

            if results.file:
                with open(results.file[0], 'r') as f:
                    songs = f.readlines()
                    # strip out any empty lines
                    songs = filter(None, (song.rstrip() for song in songs))
                    # strip out any new lines
                    songs = [quote_plus(song.strip()) for song in songs if song]
                    song_list.extend(songs)

            prompt = True if results.has_prompt else False
            quiet = True if results.is_quiet else False

            downloads = []
            for song in song_list:
                downloads.append(query_and_download(song, prompt, quiet))

            print('Downloaded: %s' % ', '.join(downloads))

if __name__ == '__main__':
    main()
